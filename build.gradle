buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.avast.gradle:docker-compose-gradle-plugin:0.3.8"
    }
}

apply plugin: 'java'
apply plugin: 'docker-compose'

project.ext {
    VERSION = '1.0.0'
}

repositories {
    mavenCentral()
}

dependencies {

    compile 'org.springframework:spring-core:4.0.1.RELEASE'
    compile 'org.springframework:spring-webmvc:4.0.1.RELEASE'

    compile 'org.eclipse.jetty:jetty-servlet:9.2.0.M0'
    compile group: 'org.eclipse.jetty', name: 'jetty-webapp', version: '9.2.0.M0'
    compile group: 'org.eclipse.jetty', name: 'jetty-annotations', version: '9.2.0.M0'
    compile group: 'org.eclipse.jetty', name: 'jetty-jsp', version: '9.2.0.M0'

    compile group: 'javax.servlet', name: 'jstl', version: '1.2'

    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.5'
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.5'

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.1'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.10'

    testCompile 'junit:junit:4.11'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.5.2'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.4.0'
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version: '3.4.0'


}

build.doFirst {
   exec { commandLine "ln", "-sf", "./scripts/post-commit", "./.git/hooks/post-commit" }
}


jar {
    archiveName = "mlb-scores-${getBuildVersion()}.jar"
    // Here the uber JAR is built, the dependent JARs are unzipped and added to the final JAR
    // If the zipTree command would be omitted, it would simply add the zipped JARs to the
    // executable JAR. However the Classloader Exception would be back.
    // compile vs. runtime shouldn't matter too much. However not all dependencies that
    // are in compile are in runtime.
    from configurations.runtime.collect {
        zipTree(it)
    }

    // Add your main class to the manifest
    manifest {
        attributes 'Main-Class': 'com.tadams.MLBScoresApplication',
                   'Implementation-Title': 'mlb-scores',
                   'Implementation-Version': "${getBuildVersion()}";
    }

    // Exclude signature files from JARs
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

jar.finalizedBy('copyJar')

task copyJar(type: Copy) {
    from 'build/libs/'
    into 'docker-java8/'
    include 'mlb-scores*.jar'
}

test {
    useJUnit {
        excludeCategories 'com.tadams.Integration'
        excludeCategories 'com.tadams.Functional'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task localFunctionalTest(type: Test) {
    useJUnit {
        includeCategories 'com.tadams.Functional'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task functionalTest(type: Test) {
    doFirst {
        if ( project.hasProperty('WEB_DRIVER') ) {
            println(project.WEB_DRIVER)
            systemProperty 'WEB_DRIVER', project.WEB_DRIVER
        }
        def webInfo = dockerCompose.servicesInfos.'mlb-scores-nginx'
        systemProperty 'mlb-scores.port', webInfo.ports[80]
    }
    useJUnit {
        includeCategories 'com.tadams.Functional'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}
dockerCompose.isRequiredBy(functionalTest)

task(integrationTest, type: Test) {
    useJUnit {
        includeCategories 'com.tadams.Integration'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

def getBuildVersion() {
    def buildVersion = "${VERSION}.${getBuildNumber()}-${getGitSha()}"
    println "Build Version: $buildVersion"
    return buildVersion
}

def getBuildNumber() {
    def buildNumber =  System.getenv("BUILD_NUMBER") == null ? "SNAPSHOT" :  System.getenv("BUILD_NUMBER")
    println "Build Number: $buildNumber"
    return buildNumber
}

def getGitSha() { 
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
